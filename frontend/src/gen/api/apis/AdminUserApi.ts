/* tslint:disable */
/* eslint-disable */
/**
 * fk-mitou-2024
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  User,
  UserCreate,
  UserUpdate,
  UserUpdateMe,
} from '../models';
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  UserFromJSON,
  UserToJSON,
  UserCreateFromJSON,
  UserCreateToJSON,
  UserUpdateFromJSON,
  UserUpdateToJSON,
  UserUpdateMeFromJSON,
  UserUpdateMeToJSON,
} from '../models';

export interface CreateAdminUserRequest {
  userCreate: UserCreate;
}

export interface DeleteUserRequest {
  userId: number;
}

export interface ReadAdminUsersRequest {
  skip?: number;
  limit?: number;
}

export interface ReadUserByIdRequest {
  userId: number;
}

export interface UpdateUserRequest {
  userId: number;
  userUpdate: UserUpdate;
}

export interface UpdateUserMeRequest {
  userUpdateMe: UserUpdateMe;
}

/**
 * AdminUserApi - interface
 *
 * @export
 * @interface AdminUserApiInterface
 */
export interface AdminUserApiInterface {
  /**
   * Create new user.
   * @summary Create Admin User
   * @param {UserCreate} userCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApiInterface
   */
  createAdminUserRaw(
    requestParameters: CreateAdminUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>>;

  /**
   * Create new user.
   * Create Admin User
   */
  createAdminUser(
    requestParameters: CreateAdminUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User>;

  /**
   * Delete a user.
   * @summary Delete User
   * @param {number} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApiInterface
   */
  deleteUserRaw(
    requestParameters: DeleteUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>>;

  /**
   * Delete a user.
   * Delete User
   */
  deleteUser(
    requestParameters: DeleteUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User>;

  /**
   * Retrieve users.
   * @summary Read Admin Users
   * @param {number} [skip]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApiInterface
   */
  readAdminUsersRaw(
    requestParameters: ReadAdminUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<User>>>;

  /**
   * Retrieve users.
   * Read Admin Users
   */
  readAdminUsers(
    requestParameters: ReadAdminUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<User>>;

  /**
   * Get a specific user by id.
   * @summary Read User By Id
   * @param {number} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApiInterface
   */
  readUserByIdRaw(
    requestParameters: ReadUserByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>>;

  /**
   * Get a specific user by id.
   * Read User By Id
   */
  readUserById(
    requestParameters: ReadUserByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User>;

  /**
   * Get current user.
   * @summary Read User Me
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApiInterface
   */
  readUserMeRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>>;

  /**
   * Get current user.
   * Read User Me
   */
  readUserMe(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User>;

  /**
   * Update a user.
   * @summary Update User
   * @param {number} userId
   * @param {UserUpdate} userUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApiInterface
   */
  updateUserRaw(
    requestParameters: UpdateUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>>;

  /**
   * Update a user.
   * Update User
   */
  updateUser(
    requestParameters: UpdateUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User>;

  /**
   * Update own user.
   * @summary Update User Me
   * @param {UserUpdateMe} userUpdateMe
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminUserApiInterface
   */
  updateUserMeRaw(
    requestParameters: UpdateUserMeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>>;

  /**
   * Update own user.
   * Update User Me
   */
  updateUserMe(
    requestParameters: UpdateUserMeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User>;
}

/**
 *
 */
export class AdminUserApi
  extends runtime.BaseAPI
  implements AdminUserApiInterface
{
  /**
   * Create new user.
   * Create Admin User
   */
  async createAdminUserRaw(
    requestParameters: CreateAdminUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (
      requestParameters.userCreate === null ||
      requestParameters.userCreate === undefined
    ) {
      throw new runtime.RequiredError(
        'userCreate',
        'Required parameter requestParameters.userCreate was null or undefined when calling createAdminUser.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/admin_user/`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UserCreateToJSON(requestParameters.userCreate),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue),
    );
  }

  /**
   * Create new user.
   * Create Admin User
   */
  async createAdminUser(
    requestParameters: CreateAdminUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.createAdminUserRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete a user.
   * Delete User
   */
  async deleteUserRaw(
    requestParameters: DeleteUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (
      requestParameters.userId === null ||
      requestParameters.userId === undefined
    ) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling deleteUser.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/admin_user/{user_id}`.replace(
          `{${'user_id'}}`,
          encodeURIComponent(String(requestParameters.userId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue),
    );
  }

  /**
   * Delete a user.
   * Delete User
   */
  async deleteUser(
    requestParameters: DeleteUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.deleteUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Retrieve users.
   * Read Admin Users
   */
  async readAdminUsersRaw(
    requestParameters: ReadAdminUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<User>>> {
    const queryParameters: any = {};

    if (requestParameters.skip !== undefined) {
      queryParameters['skip'] = requestParameters.skip;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/admin_user/`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UserFromJSON),
    );
  }

  /**
   * Retrieve users.
   * Read Admin Users
   */
  async readAdminUsers(
    requestParameters: ReadAdminUsersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<User>> {
    const response = await this.readAdminUsersRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get a specific user by id.
   * Read User By Id
   */
  async readUserByIdRaw(
    requestParameters: ReadUserByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (
      requestParameters.userId === null ||
      requestParameters.userId === undefined
    ) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling readUserById.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/admin_user/{user_id}`.replace(
          `{${'user_id'}}`,
          encodeURIComponent(String(requestParameters.userId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue),
    );
  }

  /**
   * Get a specific user by id.
   * Read User By Id
   */
  async readUserById(
    requestParameters: ReadUserByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.readUserByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get current user.
   * Read User Me
   */
  async readUserMeRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/admin_user/me`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue),
    );
  }

  /**
   * Get current user.
   * Read User Me
   */
  async readUserMe(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.readUserMeRaw(initOverrides);
    return await response.value();
  }

  /**
   * Update a user.
   * Update User
   */
  async updateUserRaw(
    requestParameters: UpdateUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (
      requestParameters.userId === null ||
      requestParameters.userId === undefined
    ) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling updateUser.',
      );
    }

    if (
      requestParameters.userUpdate === null ||
      requestParameters.userUpdate === undefined
    ) {
      throw new runtime.RequiredError(
        'userUpdate',
        'Required parameter requestParameters.userUpdate was null or undefined when calling updateUser.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/admin_user/{user_id}`.replace(
          `{${'user_id'}}`,
          encodeURIComponent(String(requestParameters.userId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UserUpdateToJSON(requestParameters.userUpdate),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue),
    );
  }

  /**
   * Update a user.
   * Update User
   */
  async updateUser(
    requestParameters: UpdateUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.updateUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update own user.
   * Update User Me
   */
  async updateUserMeRaw(
    requestParameters: UpdateUserMeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<User>> {
    if (
      requestParameters.userUpdateMe === null ||
      requestParameters.userUpdateMe === undefined
    ) {
      throw new runtime.RequiredError(
        'userUpdateMe',
        'Required parameter requestParameters.userUpdateMe was null or undefined when calling updateUserMe.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/admin_user/me`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UserUpdateMeToJSON(requestParameters.userUpdateMe),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue),
    );
  }

  /**
   * Update own user.
   * Update User Me
   */
  async updateUserMe(
    requestParameters: UpdateUserMeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<User> {
    const response = await this.updateUserMeRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
