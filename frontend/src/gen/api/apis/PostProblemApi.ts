/* tslint:disable */
/* eslint-disable */
/**
 * fk-mitou-2024
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PostCreate,
  PostMapResponse,
  PostResponse,
  PostResponseBase,
  PostUpdate,
} from '../models';
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  PostCreateFromJSON,
  PostCreateToJSON,
  PostMapResponseFromJSON,
  PostMapResponseToJSON,
  PostResponseFromJSON,
  PostResponseToJSON,
  PostResponseBaseFromJSON,
  PostResponseBaseToJSON,
  PostUpdateFromJSON,
  PostUpdateToJSON,
} from '../models';

export interface CreatePostRequest {
  problemId: number;
  postCreate: PostCreate;
}

export interface DeletePostRequest {
  problemId: number;
  postId: string;
}

export interface GetPostByIdRequest {
  problemId: number;
  postId: string;
}

export interface GetPostsMapRequest {
  skip?: number;
  limit?: number;
  isSolved?: boolean | null;
  isOpen?: boolean | null;
  problemId?: number | null;
  userId?: string | null;
}

export interface GetPostsSummaryRequest {
  skip?: number;
  limit?: number;
  isSolved?: boolean | null;
  isOpen?: boolean | null;
  problemId?: number | null;
  userId?: string | null;
}

export interface GetPostsSummaryMeRequest {
  skip?: number;
  limit?: number;
  isSolved?: boolean | null;
  isOpen?: boolean | null;
  problemId?: number | null;
}

export interface MarkAsSolvedRequest {
  problemId: number;
  postId: string;
}

export interface MarkAsUnsolvedRequest {
  problemId: number;
  postId: string;
}

export interface UpdatePostRequest {
  problemId: number;
  postId: string;
  postUpdate: PostUpdate;
}

/**
 * PostProblemApi - interface
 *
 * @export
 * @interface PostProblemApiInterface
 */
export interface PostProblemApiInterface {
  /**
   * 新しい投稿を作成
   * @summary Create Post
   * @param {number} problemId
   * @param {PostCreate} postCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostProblemApiInterface
   */
  createPostRaw(
    requestParameters: CreatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostResponse>>;

  /**
   * 新しい投稿を作成
   * Create Post
   */
  createPost(
    requestParameters: CreatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostResponse>;

  /**
   * 投稿を削除
   * @summary Delete Post
   * @param {number} problemId
   * @param {string} postId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostProblemApiInterface
   */
  deletePostRaw(
    requestParameters: DeletePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostResponse>>;

  /**
   * 投稿を削除
   * Delete Post
   */
  deletePost(
    requestParameters: DeletePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostResponse>;

  /**
   * IDによる投稿の取得
   * @summary Get Post By Id
   * @param {number} problemId
   * @param {string} postId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostProblemApiInterface
   */
  getPostByIdRaw(
    requestParameters: GetPostByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostResponse>>;

  /**
   * IDによる投稿の取得
   * Get Post By Id
   */
  getPostById(
    requestParameters: GetPostByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostResponse>;

  /**
   * 投稿の一覧を取得 フィルタリングとページネーションをサポート
   * @summary Get Posts Map
   * @param {number} [skip]
   * @param {number} [limit]
   * @param {boolean} [isSolved]
   * @param {boolean} [isOpen]
   * @param {number} [problemId]
   * @param {string} [userId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostProblemApiInterface
   */
  getPostsMapRaw(
    requestParameters: GetPostsMapRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PostMapResponse>>>;

  /**
   * 投稿の一覧を取得 フィルタリングとページネーションをサポート
   * Get Posts Map
   */
  getPostsMap(
    requestParameters: GetPostsMapRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PostMapResponse>>;

  /**
   * 投稿の一覧を取得 フィルタリングとページネーションをサポート
   * @summary Get Posts Summary
   * @param {number} [skip]
   * @param {number} [limit]
   * @param {boolean} [isSolved]
   * @param {boolean} [isOpen]
   * @param {number} [problemId]
   * @param {string} [userId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostProblemApiInterface
   */
  getPostsSummaryRaw(
    requestParameters: GetPostsSummaryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PostResponseBase>>>;

  /**
   * 投稿の一覧を取得 フィルタリングとページネーションをサポート
   * Get Posts Summary
   */
  getPostsSummary(
    requestParameters: GetPostsSummaryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PostResponseBase>>;

  /**
   * Userが投稿したレポートの一覧を取得 フィルタリングとページネーションをサポート
   * @summary Get Posts Summary Me
   * @param {number} [skip]
   * @param {number} [limit]
   * @param {boolean} [isSolved]
   * @param {boolean} [isOpen]
   * @param {number} [problemId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostProblemApiInterface
   */
  getPostsSummaryMeRaw(
    requestParameters: GetPostsSummaryMeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PostResponseBase>>>;

  /**
   * Userが投稿したレポートの一覧を取得 フィルタリングとページネーションをサポート
   * Get Posts Summary Me
   */
  getPostsSummaryMe(
    requestParameters: GetPostsSummaryMeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PostResponseBase>>;

  /**
   * 投稿を解決済みとしてマーク
   * @summary Mark As Solved
   * @param {number} problemId
   * @param {string} postId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostProblemApiInterface
   */
  markAsSolvedRaw(
    requestParameters: MarkAsSolvedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostResponse>>;

  /**
   * 投稿を解決済みとしてマーク
   * Mark As Solved
   */
  markAsSolved(
    requestParameters: MarkAsSolvedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostResponse>;

  /**
   * 投稿を未解決としてマーク
   * @summary Mark As Unsolved
   * @param {number} problemId
   * @param {string} postId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostProblemApiInterface
   */
  markAsUnsolvedRaw(
    requestParameters: MarkAsUnsolvedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostResponse>>;

  /**
   * 投稿を未解決としてマーク
   * Mark As Unsolved
   */
  markAsUnsolved(
    requestParameters: MarkAsUnsolvedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostResponse>;

  /**
   * 投稿を更新
   * @summary Update Post
   * @param {number} problemId
   * @param {string} postId
   * @param {PostUpdate} postUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostProblemApiInterface
   */
  updatePostRaw(
    requestParameters: UpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostResponse>>;

  /**
   * 投稿を更新
   * Update Post
   */
  updatePost(
    requestParameters: UpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostResponse>;
}

/**
 *
 */
export class PostProblemApi
  extends runtime.BaseAPI
  implements PostProblemApiInterface
{
  /**
   * 新しい投稿を作成
   * Create Post
   */
  async createPostRaw(
    requestParameters: CreatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostResponse>> {
    if (
      requestParameters.problemId === null ||
      requestParameters.problemId === undefined
    ) {
      throw new runtime.RequiredError(
        'problemId',
        'Required parameter requestParameters.problemId was null or undefined when calling createPost.',
      );
    }

    if (
      requestParameters.postCreate === null ||
      requestParameters.postCreate === undefined
    ) {
      throw new runtime.RequiredError(
        'postCreate',
        'Required parameter requestParameters.postCreate was null or undefined when calling createPost.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/post_problem/{problem_id}`.replace(
          `{${'problem_id'}}`,
          encodeURIComponent(String(requestParameters.problemId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: PostCreateToJSON(requestParameters.postCreate),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostResponseFromJSON(jsonValue),
    );
  }

  /**
   * 新しい投稿を作成
   * Create Post
   */
  async createPost(
    requestParameters: CreatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostResponse> {
    const response = await this.createPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * 投稿を削除
   * Delete Post
   */
  async deletePostRaw(
    requestParameters: DeletePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostResponse>> {
    if (
      requestParameters.problemId === null ||
      requestParameters.problemId === undefined
    ) {
      throw new runtime.RequiredError(
        'problemId',
        'Required parameter requestParameters.problemId was null or undefined when calling deletePost.',
      );
    }

    if (
      requestParameters.postId === null ||
      requestParameters.postId === undefined
    ) {
      throw new runtime.RequiredError(
        'postId',
        'Required parameter requestParameters.postId was null or undefined when calling deletePost.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/post_problem/detail/{problem_id}/{post_id}`
          .replace(
            `{${'problem_id'}}`,
            encodeURIComponent(String(requestParameters.problemId)),
          )
          .replace(
            `{${'post_id'}}`,
            encodeURIComponent(String(requestParameters.postId)),
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostResponseFromJSON(jsonValue),
    );
  }

  /**
   * 投稿を削除
   * Delete Post
   */
  async deletePost(
    requestParameters: DeletePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostResponse> {
    const response = await this.deletePostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * IDによる投稿の取得
   * Get Post By Id
   */
  async getPostByIdRaw(
    requestParameters: GetPostByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostResponse>> {
    if (
      requestParameters.problemId === null ||
      requestParameters.problemId === undefined
    ) {
      throw new runtime.RequiredError(
        'problemId',
        'Required parameter requestParameters.problemId was null or undefined when calling getPostById.',
      );
    }

    if (
      requestParameters.postId === null ||
      requestParameters.postId === undefined
    ) {
      throw new runtime.RequiredError(
        'postId',
        'Required parameter requestParameters.postId was null or undefined when calling getPostById.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/post_problem/detail/{problem_id}/{post_id}`
          .replace(
            `{${'problem_id'}}`,
            encodeURIComponent(String(requestParameters.problemId)),
          )
          .replace(
            `{${'post_id'}}`,
            encodeURIComponent(String(requestParameters.postId)),
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostResponseFromJSON(jsonValue),
    );
  }

  /**
   * IDによる投稿の取得
   * Get Post By Id
   */
  async getPostById(
    requestParameters: GetPostByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostResponse> {
    const response = await this.getPostByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 投稿の一覧を取得 フィルタリングとページネーションをサポート
   * Get Posts Map
   */
  async getPostsMapRaw(
    requestParameters: GetPostsMapRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PostMapResponse>>> {
    const queryParameters: any = {};

    if (requestParameters.skip !== undefined) {
      queryParameters['skip'] = requestParameters.skip;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.isSolved !== undefined) {
      queryParameters['is_solved'] = requestParameters.isSolved;
    }

    if (requestParameters.isOpen !== undefined) {
      queryParameters['is_open'] = requestParameters.isOpen;
    }

    if (requestParameters.problemId !== undefined) {
      queryParameters['problem_id'] = requestParameters.problemId;
    }

    if (requestParameters.userId !== undefined) {
      queryParameters['user_id'] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/post_problem/map`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PostMapResponseFromJSON),
    );
  }

  /**
   * 投稿の一覧を取得 フィルタリングとページネーションをサポート
   * Get Posts Map
   */
  async getPostsMap(
    requestParameters: GetPostsMapRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PostMapResponse>> {
    const response = await this.getPostsMapRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 投稿の一覧を取得 フィルタリングとページネーションをサポート
   * Get Posts Summary
   */
  async getPostsSummaryRaw(
    requestParameters: GetPostsSummaryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PostResponseBase>>> {
    const queryParameters: any = {};

    if (requestParameters.skip !== undefined) {
      queryParameters['skip'] = requestParameters.skip;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.isSolved !== undefined) {
      queryParameters['is_solved'] = requestParameters.isSolved;
    }

    if (requestParameters.isOpen !== undefined) {
      queryParameters['is_open'] = requestParameters.isOpen;
    }

    if (requestParameters.problemId !== undefined) {
      queryParameters['problem_id'] = requestParameters.problemId;
    }

    if (requestParameters.userId !== undefined) {
      queryParameters['user_id'] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/post_problem/summary`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PostResponseBaseFromJSON),
    );
  }

  /**
   * 投稿の一覧を取得 フィルタリングとページネーションをサポート
   * Get Posts Summary
   */
  async getPostsSummary(
    requestParameters: GetPostsSummaryRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PostResponseBase>> {
    const response = await this.getPostsSummaryRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Userが投稿したレポートの一覧を取得 フィルタリングとページネーションをサポート
   * Get Posts Summary Me
   */
  async getPostsSummaryMeRaw(
    requestParameters: GetPostsSummaryMeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<PostResponseBase>>> {
    const queryParameters: any = {};

    if (requestParameters.skip !== undefined) {
      queryParameters['skip'] = requestParameters.skip;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.isSolved !== undefined) {
      queryParameters['is_solved'] = requestParameters.isSolved;
    }

    if (requestParameters.isOpen !== undefined) {
      queryParameters['is_open'] = requestParameters.isOpen;
    }

    if (requestParameters.problemId !== undefined) {
      queryParameters['problem_id'] = requestParameters.problemId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/post_problem/me`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PostResponseBaseFromJSON),
    );
  }

  /**
   * Userが投稿したレポートの一覧を取得 フィルタリングとページネーションをサポート
   * Get Posts Summary Me
   */
  async getPostsSummaryMe(
    requestParameters: GetPostsSummaryMeRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<PostResponseBase>> {
    const response = await this.getPostsSummaryMeRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 投稿を解決済みとしてマーク
   * Mark As Solved
   */
  async markAsSolvedRaw(
    requestParameters: MarkAsSolvedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostResponse>> {
    if (
      requestParameters.problemId === null ||
      requestParameters.problemId === undefined
    ) {
      throw new runtime.RequiredError(
        'problemId',
        'Required parameter requestParameters.problemId was null or undefined when calling markAsSolved.',
      );
    }

    if (
      requestParameters.postId === null ||
      requestParameters.postId === undefined
    ) {
      throw new runtime.RequiredError(
        'postId',
        'Required parameter requestParameters.postId was null or undefined when calling markAsSolved.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/post_problem/detail/{problem_id}/{post_id}/solve`
          .replace(
            `{${'problem_id'}}`,
            encodeURIComponent(String(requestParameters.problemId)),
          )
          .replace(
            `{${'post_id'}}`,
            encodeURIComponent(String(requestParameters.postId)),
          ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostResponseFromJSON(jsonValue),
    );
  }

  /**
   * 投稿を解決済みとしてマーク
   * Mark As Solved
   */
  async markAsSolved(
    requestParameters: MarkAsSolvedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostResponse> {
    const response = await this.markAsSolvedRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 投稿を未解決としてマーク
   * Mark As Unsolved
   */
  async markAsUnsolvedRaw(
    requestParameters: MarkAsUnsolvedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostResponse>> {
    if (
      requestParameters.problemId === null ||
      requestParameters.problemId === undefined
    ) {
      throw new runtime.RequiredError(
        'problemId',
        'Required parameter requestParameters.problemId was null or undefined when calling markAsUnsolved.',
      );
    }

    if (
      requestParameters.postId === null ||
      requestParameters.postId === undefined
    ) {
      throw new runtime.RequiredError(
        'postId',
        'Required parameter requestParameters.postId was null or undefined when calling markAsUnsolved.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/post_problem/detail/{problem_id}/{post_id}/unsolve`
          .replace(
            `{${'problem_id'}}`,
            encodeURIComponent(String(requestParameters.problemId)),
          )
          .replace(
            `{${'post_id'}}`,
            encodeURIComponent(String(requestParameters.postId)),
          ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostResponseFromJSON(jsonValue),
    );
  }

  /**
   * 投稿を未解決としてマーク
   * Mark As Unsolved
   */
  async markAsUnsolved(
    requestParameters: MarkAsUnsolvedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostResponse> {
    const response = await this.markAsUnsolvedRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * 投稿を更新
   * Update Post
   */
  async updatePostRaw(
    requestParameters: UpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PostResponse>> {
    if (
      requestParameters.problemId === null ||
      requestParameters.problemId === undefined
    ) {
      throw new runtime.RequiredError(
        'problemId',
        'Required parameter requestParameters.problemId was null or undefined when calling updatePost.',
      );
    }

    if (
      requestParameters.postId === null ||
      requestParameters.postId === undefined
    ) {
      throw new runtime.RequiredError(
        'postId',
        'Required parameter requestParameters.postId was null or undefined when calling updatePost.',
      );
    }

    if (
      requestParameters.postUpdate === null ||
      requestParameters.postUpdate === undefined
    ) {
      throw new runtime.RequiredError(
        'postUpdate',
        'Required parameter requestParameters.postUpdate was null or undefined when calling updatePost.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/post_problem/detail/{problem_id}/{post_id}`
          .replace(
            `{${'problem_id'}}`,
            encodeURIComponent(String(requestParameters.problemId)),
          )
          .replace(
            `{${'post_id'}}`,
            encodeURIComponent(String(requestParameters.postId)),
          ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: PostUpdateToJSON(requestParameters.postUpdate),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PostResponseFromJSON(jsonValue),
    );
  }

  /**
   * 投稿を更新
   * Update Post
   */
  async updatePost(
    requestParameters: UpdatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PostResponse> {
    const response = await this.updatePostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
