/* tslint:disable */
/* eslint-disable */
/**
 * fk-mitou-2024
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CitizenUser,
  CitizenUserRead,
  HTTPValidationError,
  Token,
} from '../models';
import {
  CitizenUserFromJSON,
  CitizenUserToJSON,
  CitizenUserReadFromJSON,
  CitizenUserReadToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  TokenFromJSON,
  TokenToJSON,
} from '../models';

export interface LoginLineUserRequest {
  idToken: string;
}

export interface ReadCitizenUsersRequest {
  skip?: number;
  limit?: number;
}

export interface UpdateCitizenUserRequest {
  userId: string;
  isActive: boolean;
}

/**
 * UsersApi - interface
 *
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
  /**
   * Line login, get an access token for future requests
   * @summary Login Line User
   * @param {string} idToken
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  loginLineUserRaw(
    requestParameters: LoginLineUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Token>>;

  /**
   * Line login, get an access token for future requests
   * Login Line User
   */
  loginLineUser(
    requestParameters: LoginLineUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Token>;

  /**
   * Retrieve users.
   * @summary Read Citizen Users
   * @param {number} [skip]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  readCitizenUsersRaw(
    requestParameters: ReadCitizenUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<CitizenUserRead>>>;

  /**
   * Retrieve users.
   * Read Citizen Users
   */
  readCitizenUsers(
    requestParameters: ReadCitizenUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<CitizenUserRead>>;

  /**
   * Update a user.
   * @summary Update Citizen User
   * @param {string} userId
   * @param {boolean} isActive
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApiInterface
   */
  updateCitizenUserRaw(
    requestParameters: UpdateCitizenUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CitizenUser>>;

  /**
   * Update a user.
   * Update Citizen User
   */
  updateCitizenUser(
    requestParameters: UpdateCitizenUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CitizenUser>;
}

/**
 *
 */
export class UsersApi extends runtime.BaseAPI implements UsersApiInterface {
  /**
   * Line login, get an access token for future requests
   * Login Line User
   */
  async loginLineUserRaw(
    requestParameters: LoginLineUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Token>> {
    if (
      requestParameters.idToken === null ||
      requestParameters.idToken === undefined
    ) {
      throw new runtime.RequiredError(
        'idToken',
        'Required parameter requestParameters.idToken was null or undefined when calling loginLineUser.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.idToken !== undefined) {
      queryParameters['id_token'] = requestParameters.idToken;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/users/access-token`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TokenFromJSON(jsonValue),
    );
  }

  /**
   * Line login, get an access token for future requests
   * Login Line User
   */
  async loginLineUser(
    requestParameters: LoginLineUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Token> {
    const response = await this.loginLineUserRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Retrieve users.
   * Read Citizen Users
   */
  async readCitizenUsersRaw(
    requestParameters: ReadCitizenUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<CitizenUserRead>>> {
    const queryParameters: any = {};

    if (requestParameters.skip !== undefined) {
      queryParameters['skip'] = requestParameters.skip;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/users/`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(CitizenUserReadFromJSON),
    );
  }

  /**
   * Retrieve users.
   * Read Citizen Users
   */
  async readCitizenUsers(
    requestParameters: ReadCitizenUsersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<CitizenUserRead>> {
    const response = await this.readCitizenUsersRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update a user.
   * Update Citizen User
   */
  async updateCitizenUserRaw(
    requestParameters: UpdateCitizenUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CitizenUser>> {
    if (
      requestParameters.userId === null ||
      requestParameters.userId === undefined
    ) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling updateCitizenUser.',
      );
    }

    if (
      requestParameters.isActive === null ||
      requestParameters.isActive === undefined
    ) {
      throw new runtime.RequiredError(
        'isActive',
        'Required parameter requestParameters.isActive was null or undefined when calling updateCitizenUser.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.isActive !== undefined) {
      queryParameters['is_active'] = requestParameters.isActive;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken(
        'OAuth2PasswordBearer',
        [],
      );
    }

    const response = await this.request(
      {
        path: `/api/v1/users/{user_id}`.replace(
          `{${'user_id'}}`,
          encodeURIComponent(String(requestParameters.userId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CitizenUserFromJSON(jsonValue),
    );
  }

  /**
   * Update a user.
   * Update Citizen User
   */
  async updateCitizenUser(
    requestParameters: UpdateCitizenUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CitizenUser> {
    const response = await this.updateCitizenUserRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
