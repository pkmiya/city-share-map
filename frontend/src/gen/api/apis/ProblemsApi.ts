/* tslint:disable */
/* eslint-disable */
/**
 * fk-mitou-2024
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Problem,
  ProblemCreate,
  ProblemUpdate,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ProblemFromJSON,
    ProblemToJSON,
    ProblemCreateFromJSON,
    ProblemCreateToJSON,
    ProblemUpdateFromJSON,
    ProblemUpdateToJSON,
} from '../models';

export interface CreateProblemRequest {
    problemCreate: ProblemCreate;
}

export interface DeleteProblemRequest {
    problemId: number;
}

export interface ReadProblemByIdRequest {
    problemId: number;
}

export interface ReadProblemsRequest {
    skip?: number;
    limit?: number;
}

export interface UpdateProblemRequest {
    problemId: number;
    problemUpdate: ProblemUpdate;
}

/**
 * ProblemsApi - interface
 * 
 * @export
 * @interface ProblemsApiInterface
 */
export interface ProblemsApiInterface {
    /**
     * Create new problem.
     * @summary Create Problem
     * @param {ProblemCreate} problemCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApiInterface
     */
    createProblemRaw(requestParameters: CreateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Problem>>;

    /**
     * Create new problem.
     * Create Problem
     */
    createProblem(requestParameters: CreateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Problem>;

    /**
     * Delete a problem.
     * @summary Delete Problem
     * @param {number} problemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApiInterface
     */
    deleteProblemRaw(requestParameters: DeleteProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Problem>>;

    /**
     * Delete a problem.
     * Delete Problem
     */
    deleteProblem(requestParameters: DeleteProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Problem>;

    /**
     * Get a specific problem by id.
     * @summary Read Problem By Id
     * @param {number} problemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApiInterface
     */
    readProblemByIdRaw(requestParameters: ReadProblemByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Problem>>;

    /**
     * Get a specific problem by id.
     * Read Problem By Id
     */
    readProblemById(requestParameters: ReadProblemByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Problem>;

    /**
     * Retrieve problems.
     * @summary Read Problems
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApiInterface
     */
    readProblemsRaw(requestParameters: ReadProblemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Problem>>>;

    /**
     * Retrieve problems.
     * Read Problems
     */
    readProblems(requestParameters: ReadProblemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Problem>>;

    /**
     * Update a problem.
     * @summary Update Problem
     * @param {number} problemId 
     * @param {ProblemUpdate} problemUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApiInterface
     */
    updateProblemRaw(requestParameters: UpdateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Problem>>;

    /**
     * Update a problem.
     * Update Problem
     */
    updateProblem(requestParameters: UpdateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Problem>;

}

/**
 * 
 */
export class ProblemsApi extends runtime.BaseAPI implements ProblemsApiInterface {

    /**
     * Create new problem.
     * Create Problem
     */
    async createProblemRaw(requestParameters: CreateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Problem>> {
        if (requestParameters.problemCreate === null || requestParameters.problemCreate === undefined) {
            throw new runtime.RequiredError('problemCreate','Required parameter requestParameters.problemCreate was null or undefined when calling createProblem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/problems/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProblemCreateToJSON(requestParameters.problemCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProblemFromJSON(jsonValue));
    }

    /**
     * Create new problem.
     * Create Problem
     */
    async createProblem(requestParameters: CreateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Problem> {
        const response = await this.createProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a problem.
     * Delete Problem
     */
    async deleteProblemRaw(requestParameters: DeleteProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Problem>> {
        if (requestParameters.problemId === null || requestParameters.problemId === undefined) {
            throw new runtime.RequiredError('problemId','Required parameter requestParameters.problemId was null or undefined when calling deleteProblem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/problems/{problem_id}`.replace(`{${"problem_id"}}`, encodeURIComponent(String(requestParameters.problemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProblemFromJSON(jsonValue));
    }

    /**
     * Delete a problem.
     * Delete Problem
     */
    async deleteProblem(requestParameters: DeleteProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Problem> {
        const response = await this.deleteProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific problem by id.
     * Read Problem By Id
     */
    async readProblemByIdRaw(requestParameters: ReadProblemByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Problem>> {
        if (requestParameters.problemId === null || requestParameters.problemId === undefined) {
            throw new runtime.RequiredError('problemId','Required parameter requestParameters.problemId was null or undefined when calling readProblemById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/problems/{problem_id}`.replace(`{${"problem_id"}}`, encodeURIComponent(String(requestParameters.problemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProblemFromJSON(jsonValue));
    }

    /**
     * Get a specific problem by id.
     * Read Problem By Id
     */
    async readProblemById(requestParameters: ReadProblemByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Problem> {
        const response = await this.readProblemByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve problems.
     * Read Problems
     */
    async readProblemsRaw(requestParameters: ReadProblemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Problem>>> {
        const queryParameters: any = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/problems/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProblemFromJSON));
    }

    /**
     * Retrieve problems.
     * Read Problems
     */
    async readProblems(requestParameters: ReadProblemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Problem>> {
        const response = await this.readProblemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a problem.
     * Update Problem
     */
    async updateProblemRaw(requestParameters: UpdateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Problem>> {
        if (requestParameters.problemId === null || requestParameters.problemId === undefined) {
            throw new runtime.RequiredError('problemId','Required parameter requestParameters.problemId was null or undefined when calling updateProblem.');
        }

        if (requestParameters.problemUpdate === null || requestParameters.problemUpdate === undefined) {
            throw new runtime.RequiredError('problemUpdate','Required parameter requestParameters.problemUpdate was null or undefined when calling updateProblem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/problems/{problem_id}`.replace(`{${"problem_id"}}`, encodeURIComponent(String(requestParameters.problemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProblemUpdateToJSON(requestParameters.problemUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProblemFromJSON(jsonValue));
    }

    /**
     * Update a problem.
     * Update Problem
     */
    async updateProblem(requestParameters: UpdateProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Problem> {
        const response = await this.updateProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
