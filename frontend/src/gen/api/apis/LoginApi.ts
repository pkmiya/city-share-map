/* tslint:disable */
/* eslint-disable */
/**
 * fk-mitou-2024
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Msg,
  NewPassword,
  Token,
  User,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MsgFromJSON,
    MsgToJSON,
    NewPasswordFromJSON,
    NewPasswordToJSON,
    TokenFromJSON,
    TokenToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface LoginAccessTokenRequest {
    username: string;
    password: string;
    grantType?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

export interface RecoverPasswordRequest {
    email: string;
}

export interface RecoverPasswordHtmlContentRequest {
    email: string;
}

export interface ResetPasswordRequest {
    newPassword: NewPassword;
}

/**
 * LoginApi - interface
 * 
 * @export
 * @interface LoginApiInterface
 */
export interface LoginApiInterface {
    /**
     * OAuth2 compatible token login, get an access token for future requests
     * @summary Login Access Token
     * @param {string} username 
     * @param {string} password 
     * @param {string} [grantType] 
     * @param {string} [scope] 
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApiInterface
     */
    loginAccessTokenRaw(requestParameters: LoginAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>>;

    /**
     * OAuth2 compatible token login, get an access token for future requests
     * Login Access Token
     */
    loginAccessToken(requestParameters: LoginAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token>;

    /**
     * Password Recovery
     * @summary Recover Password
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApiInterface
     */
    recoverPasswordRaw(requestParameters: RecoverPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Msg>>;

    /**
     * Password Recovery
     * Recover Password
     */
    recoverPassword(requestParameters: RecoverPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Msg>;

    /**
     * HTML Content for Password Recovery
     * @summary Recover Password Html Content
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApiInterface
     */
    recoverPasswordHtmlContentRaw(requestParameters: RecoverPasswordHtmlContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * HTML Content for Password Recovery
     * Recover Password Html Content
     */
    recoverPasswordHtmlContent(requestParameters: RecoverPasswordHtmlContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * Reset password
     * @summary Reset Password
     * @param {NewPassword} newPassword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApiInterface
     */
    resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Msg>>;

    /**
     * Reset password
     * Reset Password
     */
    resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Msg>;

    /**
     * Test access token
     * @summary Test Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApiInterface
     */
    testTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     * Test access token
     * Test Token
     */
    testToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

}

/**
 * 
 */
export class LoginApi extends runtime.BaseAPI implements LoginApiInterface {

    /**
     * OAuth2 compatible token login, get an access token for future requests
     * Login Access Token
     */
    async loginAccessTokenRaw(requestParameters: LoginAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling loginAccessToken.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling loginAccessToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.scope !== undefined) {
            formParams.append('scope', requestParameters.scope as any);
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.clientSecret !== undefined) {
            formParams.append('client_secret', requestParameters.clientSecret as any);
        }

        const response = await this.request({
            path: `/api/v1/login/access-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * OAuth2 compatible token login, get an access token for future requests
     * Login Access Token
     */
    async loginAccessToken(requestParameters: LoginAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.loginAccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Password Recovery
     * Recover Password
     */
    async recoverPasswordRaw(requestParameters: RecoverPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Msg>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling recoverPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/login/password-recovery/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MsgFromJSON(jsonValue));
    }

    /**
     * Password Recovery
     * Recover Password
     */
    async recoverPassword(requestParameters: RecoverPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Msg> {
        const response = await this.recoverPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Content for Password Recovery
     * Recover Password Html Content
     */
    async recoverPasswordHtmlContentRaw(requestParameters: RecoverPasswordHtmlContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling recoverPasswordHtmlContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/login/password-recovery-html-content/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * HTML Content for Password Recovery
     * Recover Password Html Content
     */
    async recoverPasswordHtmlContent(requestParameters: RecoverPasswordHtmlContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.recoverPasswordHtmlContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset password
     * Reset Password
     */
    async resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Msg>> {
        if (requestParameters.newPassword === null || requestParameters.newPassword === undefined) {
            throw new runtime.RequiredError('newPassword','Required parameter requestParameters.newPassword was null or undefined when calling resetPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/login/reset-password/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewPasswordToJSON(requestParameters.newPassword),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MsgFromJSON(jsonValue));
    }

    /**
     * Reset password
     * Reset Password
     */
    async resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Msg> {
        const response = await this.resetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test access token
     * Test Token
     */
    async testTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/login/test-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Test access token
     * Test Token
     */
    async testToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.testTokenRaw(initOverrides);
        return await response.value();
    }

}
