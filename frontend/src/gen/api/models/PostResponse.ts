/* tslint:disable */
/* eslint-disable */
/**
 * fk-mitou-2024
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Coordinate } from './Coordinate';
import { CoordinateFromJSON, CoordinateToJSON } from './Coordinate';
import type { Items } from './Items';
import { ItemsToJSON } from './Items';
import type { ProblemForPost } from './ProblemForPost';
import { ProblemForPostFromJSON, ProblemForPostToJSON } from './ProblemForPost';
import type { UpdatedBy } from './UpdatedBy';
import { UpdatedByFromJSON, UpdatedByToJSON } from './UpdatedBy';
import type { UserForPost } from './UserForPost';
import { UserForPostFromJSON, UserForPostToJSON } from './UserForPost';

/**
 *
 * @export
 * @interface PostResponse
 */
export interface PostResponse {
  /**
   *
   * @type {Coordinate}
   * @memberof PostResponse
   */
  coodinate: Coordinate;
  /**
   *
   * @type {Date}
   * @memberof PostResponse
   */
  createdAt: Date;
  /**
   *
   * @type {string}
   * @memberof PostResponse
   */
  id: string;
  /**
   *
   * @type {boolean}
   * @memberof PostResponse
   */
  isSolved: boolean;
  /**
   *
   * @type {{ [key: string]: Items; }}
   * @memberof PostResponse
   */
  items: { [key: string]: Items } | null;
  /**
   *
   * @type {ProblemForPost}
   * @memberof PostResponse
   */
  problem: ProblemForPost;
  /**
   *
   * @type {Date}
   * @memberof PostResponse
   */
  updatedAt: Date | null;
  /**
   *
   * @type {UpdatedBy}
   * @memberof PostResponse
   */
  updatedBy: UpdatedBy | null;
  /**
   *
   * @type {UserForPost}
   * @memberof PostResponse
   */
  user: UserForPost | null;
}

/**
 * Check if a given object implements the PostResponse interface.
 */
export function instanceOfPostResponse(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'coodinate' in value;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'isSolved' in value;
  isInstance = isInstance && 'items' in value;
  isInstance = isInstance && 'problem' in value;
  isInstance = isInstance && 'updatedAt' in value;
  isInstance = isInstance && 'updatedBy' in value;
  isInstance = isInstance && 'user' in value;

  return isInstance;
}

export function PostResponseFromJSON(json: any): PostResponse {
  return PostResponseFromJSONTyped(json, false);
}

export function PostResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): PostResponse {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    coodinate: CoordinateFromJSON(json['coodinate']),
    createdAt: new Date(json['created_at']),
    id: json['id'],
    isSolved: json['is_solved'],
    items: mapValues(json.items, ItemsToJSON),
    problem: ProblemForPostFromJSON(json['problem']),
    updatedAt:
      json['updated_at'] === null ? null : new Date(json['updated_at']),
    updatedBy: UpdatedByFromJSON(json['updated_by']),
    user: UserForPostFromJSON(json['user']),
  };
}

export function PostResponseToJSON(value?: PostResponse | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    coodinate: CoordinateToJSON(value.coodinate),
    created_at: value.createdAt.toISOString(),
    id: value.id,
    is_solved: value.isSolved,
    items: mapValues(value.items, ItemsToJSON),
    problem: ProblemForPostToJSON(value.problem),
    updated_at: value.updatedAt === null ? null : value.updatedAt.toISOString(),
    updated_by: UpdatedByToJSON(value.updatedBy),
    user: UserForPostToJSON(value.user),
  };
}
