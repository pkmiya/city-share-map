/* tslint:disable */
/* eslint-disable */
/**
 * fk-mitou-2024
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProblemItemCreate } from './ProblemItemCreate';
import {
  ProblemItemCreateFromJSON,
  ProblemItemCreateFromJSONTyped,
  ProblemItemCreateToJSON,
} from './ProblemItemCreate';

/**
 *
 * @export
 * @interface ProblemCreate
 */
export interface ProblemCreate {
  /**
   *
   * @type {string}
   * @memberof ProblemCreate
   */
  description?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof ProblemCreate
   */
  isOpen?: boolean;
  /**
   *
   * @type {Array<ProblemItemCreate>}
   * @memberof ProblemCreate
   */
  items: Array<ProblemItemCreate>;
  /**
   *
   * @type {string}
   * @memberof ProblemCreate
   */
  name: string;
}

/**
 * Check if a given object implements the ProblemCreate interface.
 */
export function instanceOfProblemCreate(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'items' in value;
  isInstance = isInstance && 'name' in value;

  return isInstance;
}

export function ProblemCreateFromJSON(json: any): ProblemCreate {
  return ProblemCreateFromJSONTyped(json, false);
}

export function ProblemCreateFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ProblemCreate {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    description: !exists(json, 'description') ? undefined : json['description'],
    isOpen: !exists(json, 'is_open') ? undefined : json['is_open'],
    items: (json['items'] as Array<any>).map(ProblemItemCreateFromJSON),
    name: json['name'],
  };
}

export function ProblemCreateToJSON(value?: ProblemCreate | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    description: value.description,
    is_open: value.isOpen,
    items: (value.items as Array<any>).map(ProblemItemCreateToJSON),
    name: value.name,
  };
}
