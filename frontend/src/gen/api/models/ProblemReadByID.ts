/* tslint:disable */
/* eslint-disable */
/**
 * fk-mitou-2024
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProblemItemBase } from './ProblemItemBase';
import {
  ProblemItemBaseFromJSON,
  ProblemItemBaseFromJSONTyped,
  ProblemItemBaseToJSON,
} from './ProblemItemBase';

/**
 *
 * @export
 * @interface ProblemReadByID
 */
export interface ProblemReadByID {
  /**
   *
   * @type {Date}
   * @memberof ProblemReadByID
   */
  createdAt: Date | null;
  /**
   *
   * @type {string}
   * @memberof ProblemReadByID
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof ProblemReadByID
   */
  id: number;
  /**
   *
   * @type {boolean}
   * @memberof ProblemReadByID
   */
  isOpen?: boolean;
  /**
   *
   * @type {Array<ProblemItemBase>}
   * @memberof ProblemReadByID
   */
  items: Array<ProblemItemBase>;
  /**
   *
   * @type {string}
   * @memberof ProblemReadByID
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof ProblemReadByID
   */
  postCount?: number | null;
}

/**
 * Check if a given object implements the ProblemReadByID interface.
 */
export function instanceOfProblemReadByID(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'items' in value;
  isInstance = isInstance && 'name' in value;

  return isInstance;
}

export function ProblemReadByIDFromJSON(json: any): ProblemReadByID {
  return ProblemReadByIDFromJSONTyped(json, false);
}

export function ProblemReadByIDFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ProblemReadByID {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    createdAt:
      json['created_at'] === null ? null : new Date(json['created_at']),
    description: !exists(json, 'description') ? undefined : json['description'],
    id: json['id'],
    isOpen: !exists(json, 'is_open') ? undefined : json['is_open'],
    items: (json['items'] as Array<any>).map(ProblemItemBaseFromJSON),
    name: json['name'],
    postCount: !exists(json, 'post_count') ? undefined : json['post_count'],
  };
}

export function ProblemReadByIDToJSON(value?: ProblemReadByID | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    created_at: value.createdAt === null ? null : value.createdAt.toISOString(),
    description: value.description,
    id: value.id,
    is_open: value.isOpen,
    items: (value.items as Array<any>).map(ProblemItemBaseToJSON),
    name: value.name,
    post_count: value.postCount,
  };
}
