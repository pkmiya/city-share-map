openapi: 3.1.0
info:
  title: fk-mitou-2024
  version: 0.1.0

tags:
  - name: login
    description: login周りの操作
  - name: users
    description: 自治体ユーザー操作
  - name: problem
    description: 自治体側の課題操作
  - name: post_problem
    description: 投稿操作

paths:
  /api/v1/login/access-token:
    post:
      tags:
        - login
      summary: Login Access Token
      description: OAuth2 compatible token login, get an access token for future requests
      operationId: login_access_token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Body_login_access_token"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

  /api/v1/login/test-token:
    post:
      tags:
        - login
      summary: Test Token
      description: Test access token
      operationId: test_token
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - OAuth2PasswordBearer: []

  /api/v1/login/password-recovery/{email}:
    post:
      tags:
        - login
      summary: Recover Password
      description: Password Recovery
      operationId: recover_password
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            title: Email
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Msg"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

  /api/v1/login/reset-password/:
    post:
      tags:
        - login
      summary: Reset Password
      description: Reset password
      operationId: reset_password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPassword"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Msg"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

  /api/v1/login/password-recovery-html-content/{email}:
    post:
      tags:
        - login
      summary: Recover Password Html Content
      description: HTML Content for Password Recovery
      operationId: recover_password_html_content
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            title: Email
      responses:
        "200":
          description: Successful Response
          content:
            text/html:
              schema:
                type: string
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

  /api/v1/users/:
    get:
      tags:
        - users
      summary: Read Users
      description: Retrieve users.
      operationId: read_users
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
            title: Skip
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            title: Limit
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                title: Response Read Users
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

    post:
      tags:
        - users
      summary: Create User
      description: Create new user.
      operationId: create_user
      security:
        - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

  /api/v1/users/me:
    get:
      tags:
        - users
      summary: Read User Me
      description: Get current user.
      operationId: read_user_me
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      security:
        - OAuth2PasswordBearer: []

    put:
      tags:
        - users
      summary: Update User Me
      description: Update own user.
      operationId: update_user_me
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Body_update_user_me"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - OAuth2PasswordBearer: []

  /api/v1/users/{user_id}:
    get:
      tags:
        - users
      summary: Read User By Id
      description: Get a specific user by id.
      operationId: read_user_by_id
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            title: User Id
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

    put:
      tags:
        - users
      summary: Update User
      description: Update a user.
      operationId: update_user
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            title: User Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

    delete:
      tags:
        - users
      summary: Delete User
      description: Delete a user.
      operationId: delete_user
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            title: User Id
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

  /api/v1/problem/:
    get:
      tags:
        - problem
      summary: Read Problems
      description: Retrieve problems.
      operationId: read_problems
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ”#/components/schemas/ProblemRead”
        422:
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: ”#/components/schemas/HTTPValidationError”

  /api/v1/problem/item_type:
    get:
      tags:
        - problem
      summary: Read Item Type
      description: Retrieve item types.
      operationId: read_item_type
      security:
        - OAuth2PasswordBearer: []
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ”#/components/schemas/Type”

  /api/v1/problem/data/{id}:
    get:
      tags:
        - problem
      summary: Read Problem By Id
      description: Get problem by ID.
      operationId: read_problem_by_id
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: ”#/components/schemas/ProblemReadByID”
        422:
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: ”#/components/schemas/HTTPValidationError”

    put:
      tags:
        - problem
      summary: Update Problem
      description: Update problem by ID.
      operationId: update_problem
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ”#/components/schemas/ProblemUpdate”
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: ”#/components/schemas/Problem”
        422:
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: ”#/components/schemas/HTTPValidationError”

    delete:
      tags:
        - problem
      summary: Delete Problem
      description: Delete a problem.
      operationId: delete_problem
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: ”#/components/schemas/Problem”
        422:
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: ”#/components/schemas/HTTPValidationError”


  api/v1/post_problem/:
    get:
      tags:
        - post_problem
      summary: Read All Posts
      description: Get all posts. Support filtering and pagination.
      operationId: list_posts
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
        - name: is_solved
          in: query
          required: false
          schema:
            anyOf:
              - type: boolean
              - type: "null"
        - name: is_open
          in: query
          required: false
          schema:
            anyOf:
              - type: boolean
              - type: "null"
        - name: problem_id
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: "null"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

  api/v1/post_problem/me:
    get:
      tags:
        - post_problem
      summary: Get Posts Me
      description: Get posts created by the user. Support filtering and pagination.
      operationId: get_posts_me
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
        - name: is_solved
          in: query
          required: false
          schema:
            anyOf:
              - type: boolean
              - type: "null"
        - name: is_open
          in: query
          required: false
          schema:
            anyOf:
              - type: boolean
              - type: "null"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

  api/v1/post_problem/{problem_id}:
    post:
      tags:
        - post_problem
      summary: Create Post
      description: Create new post.
      operationId: create_post
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: problem_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCreate"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: string
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

  api/v1/post_problem/{problem_id}/{post_id}:
    get:
      tags:
        - post_problem
      summary: Get Post By Id
      description: Get a specific post by id.
      operationId: get_post_by_id
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: problem_id
          in: path
          required: true
          schema:
            type: integer
        - name: post_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
    
    put:
      tags:
        - post_problem
      summary: Update Post
      description: Update a post.
      operationId: update_post
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: problem_id
          in: path
          required: true
          schema:
            type: integer
        - name: post_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostUpdate"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
    
    delete:
      tags:
        - post_problem
      summary: Delete Post
      description: Delete a post.
      operationId: delete_post
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: problem_id
          in: path
          required: true
          schema:
            type: integer
        - name: post_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

  api/v1/post_problem/{problem_id}/{post_id}/solve:
    patch:
      tags:
        - post_problem
      summary: Mark As Solved
      description: Mark a post as solved.
      operationId: mark_as_solved
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: problem_id
          in: path
          required: true
          schema:
            type: integer
        - name: post_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

  api/v1/post_problem/{problem_id}/{post_id}/unsolve:
    patch:
      tags:
        - post_problem
      summary: Mark As Unsolved
      description: Mark a post as unsolved.
      operationId: mark_as_unsolved
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: problem_id
          in: path
          required: true
          schema:
            type: integer
        - name: post_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"

components:
  schemas:
    Body_login_access_token:
      type: object
      required:
        - username
        - password
      properties:
        grant_type:
          type: string
          title: Grant Type
          pattern: password
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
        scope:
          type: string
          title: Scope
          default: ""
        client_id:
          type: string
          title: Client Id
        client_secret:
          type: string
          title: Client Secret

    Body_update_user_me:
      type: object
      properties:
        password:
          type: string
          title: Password
        full_name:
          type: string
          title: Full Name
        email:
          type: string
          format: email
          title: Email

    HTTPValidationError:
      type: object
      title: HTTPValidationError
      properties:
        detail:
          type: array
          title: Detail
          items:
            $ref: "#/components/schemas/ValidationError"

    Msg:
      type: object
      required:
        - msg
      properties:
        msg:
          type: string
          title: Msg

    NewPassword:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          title: Password
        token:
          type: string
          title: Token

    Token:
      type: object
      required:
        - access_token
        - token_type
      properties:
        access_token:
          type: string
          title: Access Token
        token_type:
          type: string
          title: Token Type

    User:
      type: object
      properties:
        id:
          type: integer
          title: Id
        email:
          type: string
          format: email
          title: Email
        is_active:
          type: boolean
          title: Is Active
        is_superuser:
          type: boolean
          title: Is Superuser
        full_name:
          type: string
          title: Full Name

    UserCreate:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          title: Email
        password:
          type: string
          title: Password
        full_name:
          type: string
          title: Full Name
        is_superuser:
          type: boolean
          title: Is Superuser

    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email
        password:
          type: string
          title: Password
        full_name:
          type: string
          title: Full Name
        is_superuser:
          type: boolean
          title: Is Superuser

    Problem:
      type: object
      properties:
        id:
          type: integer
          title: Id
        title:
          type: string
          title: Title
        description:
          type: string
          title: Description
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At

    ProblemRead:
      type: object
      title: ProblemRead
      required:
        - name
        - id
        - created_at
      properties:
        name:
          type: string
        is_open:
          type: boolean
          default: false
        id:
          type: integer
        post_count:
          type: integer
          default: 0
        created_at:
          type: string
          format: date-time

    ProblemReadByID:
      type: object
      title: ProblemReadByID
      required:
        - name
        - id
        - created_at
        - items
      properties:
        name:
          type: string
        is_open:
          type: boolean
          default: false
        id:
          type: integer
        post_count:
          type: integer
          default: 0
        created_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: ”#/components/schemas/ProblemItemBase”
    
    ProblemItemBase:
      type: object
      title: ProblemItemBase
      required:
        - id
        - name
      properties:
        id:
          type: integer
          default: 1
        name:
          type: string

    Type:
      type: object
      title: Type
      required:
        - id
        - name
      properties:
        id:
          type: integer
        name:
          type: string

    ProblemCreate:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          title: Title
        description:
          type: string
          title: Description

    ProblemUpdate:
      type: object
      properties:
        title:
          type: string
          title: Title
        description:
          type: string
          title: Description

    PostCreate:
      type: object
      required:
        - latitude
        - longitude
        - items
      properties:
        latitude:
          oneOf:
            - type: number
            - type: string
        longitude:
          oneOf:
            - type: number
            - type: string
        is_solved:
          type: boolean
          default: false
        items:
          type: object

    PostUpdate:
      type: object
      required:
        - latitude
        - longitude
        - items
      properties:
        latitude:
          oneOf:
            - type: number
            - type: string
            - type: "null"
        longitude:
          oneOf:
            - type: number
            - type: string
            - type: "null"
        items:
          oneOf:
            - type: object
            - type: "null"

    ValidationError:
      type: object
      title: ValidationError
      properties:
        loc:
          type: array
          title: Location
          items:
            type: string
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type

    securitySchemes:
      OAuth2PasswordBearer:
        type: oauth2
        flows:
          password:
            tokenUrl: /api/v1/login/access-token
