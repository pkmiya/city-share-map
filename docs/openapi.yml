components:
  schemas:
    CitizenUser:
      properties:
        id:
          format: uuid
          title: Id
          type: string
        is_active:
          anyOf:
          - type: boolean
          - type: 'null'
          default: true
          title: Is Active
        line_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Line Id
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
      title: CitizenUser
      type: object
    CitizenUserRead:
      properties:
        id:
          format: uuid
          title: Id
          type: string
        is_active:
          anyOf:
          - type: boolean
          - type: 'null'
          default: true
          title: Is Active
        last_login:
          format: date-time
          title: Last Login
          type: string
        line_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Line Id
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
        post_count:
          title: Post Count
          type: integer
      required:
      - last_login
      - post_count
      title: CitizenUserRead
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    LoginRequest:
      properties:
        password:
          title: Password
          type: string
        username:
          title: Username
          type: string
      required:
      - username
      - password
      title: LoginRequest
      type: object
    Msg:
      properties:
        msg:
          title: Msg
          type: string
      required:
      - msg
      title: Msg
      type: object
    NewPassword:
      properties:
        new_password:
          maxLength: 40
          minLength: 8
          title: New Password
          type: string
        token:
          title: Token
          type: string
      required:
      - token
      - new_password
      title: NewPassword
      type: object
    PostCreate:
      properties:
        is_solved:
          default: false
          title: Is Solved
          type: boolean
        items:
          title: Items
          type: object
        latitude:
          anyOf:
          - type: number
          - type: string
          title: Latitude
        longitude:
          anyOf:
          - type: number
          - type: string
          title: Longitude
      required:
      - latitude
      - longitude
      - items
      title: PostCreate
      type: object
    PostUpdate:
      properties:
        items:
          anyOf:
          - type: object
          - type: 'null'
          title: Items
        latitude:
          anyOf:
          - type: number
          - type: string
          - type: 'null'
          title: Latitude
        longitude:
          anyOf:
          - type: number
          - type: string
          - type: 'null'
          title: Longitude
      title: PostUpdate
      type: object
    Problem:
      properties:
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        id:
          title: Id
          type: integer
        is_open:
          default: false
          title: Is Open
          type: boolean
        name:
          title: Name
          type: string
      required:
      - name
      - id
      title: Problem
      type: object
    ProblemCreate:
      properties:
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        is_open:
          default: false
          title: Is Open
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/ProblemItemCreate'
          title: Items
          type: array
        name:
          title: Name
          type: string
      required:
      - name
      - items
      title: ProblemCreate
      type: object
    ProblemItemBase:
      properties:
        name:
          title: Name
          type: string
        type_id:
          default: 1
          title: Type Id
          type: integer
      required:
      - name
      title: ProblemItemBase
      type: object
    ProblemItemCreate:
      properties:
        name:
          title: Name
          type: string
        type_id:
          default: 1
          title: Type Id
          type: integer
      required:
      - name
      title: ProblemItemCreate
      type: object
    ProblemRead:
      properties:
        created_at:
          anyOf:
          - format: date-time
            type: string
          - type: 'null'
          title: Created At
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        id:
          title: Id
          type: integer
        is_open:
          default: false
          title: Is Open
          type: boolean
        name:
          title: Name
          type: string
        post_count:
          anyOf:
          - type: integer
          - type: 'null'
          default: 0
          title: Post Count
      required:
      - name
      - id
      - created_at
      title: ProblemRead
      type: object
    ProblemReadByID:
      properties:
        created_at:
          anyOf:
          - format: date-time
            type: string
          - type: 'null'
          title: Created At
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        id:
          title: Id
          type: integer
        is_open:
          default: false
          title: Is Open
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/ProblemItemBase'
          title: Items
          type: array
        name:
          title: Name
          type: string
        post_count:
          anyOf:
          - type: integer
          - type: 'null'
          default: 0
          title: Post Count
      required:
      - name
      - id
      - created_at
      - items
      title: ProblemReadByID
      type: object
    ProblemUpdate:
      properties:
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        is_open:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Is Open
        name:
          anyOf:
          - type: string
          - type: 'null'
          title: Name
      title: ProblemUpdate
      type: object
    Token:
      properties:
        access_token:
          title: Access Token
          type: string
        token_type:
          default: bearer
          title: Token Type
          type: string
      required:
      - access_token
      title: Token
      type: object
    Type:
      properties:
        id:
          title: Id
          type: integer
        name:
          title: Name
          type: string
      required:
      - id
      - name
      title: Type
      type: object
    User:
      properties:
        department:
          anyOf:
          - type: string
          - type: 'null'
          title: Department
        email:
          anyOf:
          - format: email
            type: string
          - type: 'null'
          title: Email
        full_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Full Name
        id:
          title: Id
          type: integer
        is_active:
          anyOf:
          - type: boolean
          - type: 'null'
          default: true
          title: Is Active
        is_superuser:
          anyOf:
          - type: boolean
          - type: 'null'
          default: false
          title: Is Superuser
      title: User
      type: object
    UserCreate:
      properties:
        department:
          title: Department
          type: string
        email:
          format: email
          title: Email
          type: string
        full_name:
          title: Full Name
          type: string
        is_active:
          anyOf:
          - type: boolean
          - type: 'null'
          default: true
          title: Is Active
        is_superuser:
          anyOf:
          - type: boolean
          - type: 'null'
          default: false
          title: Is Superuser
        password:
          title: Password
          type: string
      required:
      - email
      - department
      - full_name
      - password
      title: UserCreate
      type: object
    UserToken:
      properties:
        access_token:
          title: Access Token
          type: string
        id_token:
          title: Id Token
          type: string
        token_type:
          default: bearer
          title: Token Type
          type: string
      required:
      - access_token
      - id_token
      title: UserToken
      type: object
    UserUpdate:
      properties:
        is_active:
          anyOf:
          - type: boolean
          - type: 'null'
          default: true
          title: Is Active
        is_superuser:
          anyOf:
          - type: boolean
          - type: 'null'
          default: false
          title: Is Superuser
      title: UserUpdate
      type: object
    UserUpdateMe:
      properties:
        department:
          anyOf:
          - type: string
          - type: 'null'
          title: Department
        email:
          anyOf:
          - format: email
            type: string
          - type: 'null'
          title: Email
        full_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Full Name
        password:
          anyOf:
          - type: string
          - type: 'null'
          title: Password
      title: UserUpdateMe
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
  securitySchemes:
    OAuth2PasswordBearer:
      flows:
        password:
          scopes: {}
          tokenUrl: /api/v1/login/
      type: oauth2
info:
  title: fk-mitou-2024
  version: 0.1.0
openapi: 3.1.0
paths:
  /api/v1/admin_user/:
    get:
      description: Retrieve users.
      operationId: read_admin_users
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                title: Response Read Admin Users
                type: array
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Read Admin Users
      tags:
      - admin_user
    post:
      description: Create new user.
      operationId: create_admin_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Create Admin User
      tags:
      - admin_user
  /api/v1/admin_user/me:
    get:
      description: Get current user.
      operationId: read_user_me
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Read User Me
      tags:
      - admin_user
    put:
      description: Update own user.
      operationId: update_user_me
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateMe'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Update User Me
      tags:
      - admin_user
  /api/v1/admin_user/{user_id}:
    delete:
      description: Delete a user.
      operationId: delete_user
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Delete User
      tags:
      - admin_user
    get:
      description: Get a specific user by id.
      operationId: read_user_by_id
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Read User By Id
      tags:
      - admin_user
    put:
      description: Update a user.
      operationId: update_user
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Update User
      tags:
      - admin_user
  /api/v1/login/:
    post:
      description: Token login, get an access token for future requests
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserToken'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Login
      tags:
      - login
  /api/v1/login/password-recovery/{email}:
    post:
      description: Password Recovery
      operationId: recover_password
      parameters:
      - in: path
        name: email
        required: true
        schema:
          title: Email
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Msg'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Recover Password
      tags:
      - login
  /api/v1/login/reset-password/:
    post:
      description: Reset password
      operationId: reset_password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPassword'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Msg'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Reset Password
      tags:
      - login
  /api/v1/post_problem/:
    get:
      description: '投稿の一覧を取得

        フィルタリングとページネーションをサポート'
      operationId: list_posts_by_citizen
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      - in: query
        name: is_solved
        required: false
        schema:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Is Solved
      - in: query
        name: is_open
        required: false
        schema:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Is Open
      - in: query
        name: problem_id
        required: false
        schema:
          anyOf:
          - type: integer
          - type: 'null'
          title: Problem Id
      - in: query
        name: user_id
        required: false
        schema:
          anyOf:
          - format: uuid
            type: string
          - type: 'null'
          title: User Id
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: object
                title: Response List Posts By Citizen
                type: array
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: List Posts By Citizen
      tags:
      - post_problem
  /api/v1/post_problem/me:
    get:
      description: 'Userが投稿したレポートの一覧を取得

        フィルタリングとページネーションをサポート'
      operationId: get_posts_me
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      - in: query
        name: is_solved
        required: false
        schema:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Is Solved
      - in: query
        name: is_open
        required: false
        schema:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Is Open
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: object
                title: Response Get Posts Me
                type: array
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Posts Me
      tags:
      - post_problem
  /api/v1/post_problem/{problem_id}:
    post:
      description: 新しい投稿を作成
      operationId: create_post
      parameters:
      - in: path
        name: problem_id
        required: true
        schema:
          title: Problem Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Create Post
                type: string
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Create Post
      tags:
      - post_problem
  /api/v1/post_problem/{problem_id}/{post_id}:
    delete:
      description: 投稿を削除
      operationId: delete_post
      parameters:
      - in: path
        name: problem_id
        required: true
        schema:
          title: Problem Id
          type: integer
      - in: path
        name: post_id
        required: true
        schema:
          format: uuid
          title: Post Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Delete Post
      tags:
      - post_problem
    get:
      description: IDによる投稿の取得
      operationId: get_post_by_id
      parameters:
      - in: path
        name: problem_id
        required: true
        schema:
          title: Problem Id
          type: integer
      - in: path
        name: post_id
        required: true
        schema:
          format: uuid
          title: Post Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Get Post By Id
                type: object
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Post By Id
      tags:
      - post_problem
    put:
      description: 投稿を更新
      operationId: update_post
      parameters:
      - in: path
        name: problem_id
        required: true
        schema:
          title: Problem Id
          type: integer
      - in: path
        name: post_id
        required: true
        schema:
          format: uuid
          title: Post Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Update Post
                type: object
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Update Post
      tags:
      - post_problem
  /api/v1/post_problem/{problem_id}/{post_id}/solve:
    patch:
      description: 投稿を解決済みとしてマーク
      operationId: mark_as_solved
      parameters:
      - in: path
        name: problem_id
        required: true
        schema:
          title: Problem Id
          type: integer
      - in: path
        name: post_id
        required: true
        schema:
          format: uuid
          title: Post Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Mark As Solved
                type: object
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Mark As Solved
      tags:
      - post_problem
  /api/v1/post_problem/{problem_id}/{post_id}/unsolve:
    patch:
      description: 投稿を未解決としてマーク
      operationId: mark_as_unsolved
      parameters:
      - in: path
        name: problem_id
        required: true
        schema:
          title: Problem Id
          type: integer
      - in: path
        name: post_id
        required: true
        schema:
          format: uuid
          title: Post Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Mark As Unsolved
                type: object
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Mark As Unsolved
      tags:
      - post_problem
  /api/v1/problem/:
    get:
      description: Retrieve problems.
      operationId: read_problems
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProblemRead'
                title: Response Read Problems
                type: array
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Read Problems
      tags:
      - problem
    post:
      description: Create new problem with items.
      operationId: create_problem
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProblemCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Create Problem
      tags:
      - problem
  /api/v1/problem/data/{id}:
    delete:
      description: Delete a problem.
      operationId: delete_problem
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Delete Problem
      tags:
      - problem
    get:
      description: Get problem by ID.
      operationId: read_problem_by_id
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemReadByID'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Read Problem By Id
      tags:
      - problem
    put:
      description: Get problem posts by ID.
      operationId: update_problem
      parameters:
      - in: path
        name: id
        required: true
        schema:
          title: Id
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProblemUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Update Problem
      tags:
      - problem
  /api/v1/problem/item_type:
    get:
      description: Retrieve problems.
      operationId: read_item_type
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Type'
                title: Response Read Item Type
                type: array
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Read Item Type
      tags:
      - problem
  /api/v1/users/:
    get:
      description: Retrieve users.
      operationId: read_citizen_users
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CitizenUserRead'
                title: Response Read Citizen Users
                type: array
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Read Citizen Users
      tags:
      - users
  /api/v1/users/access-token:
    post:
      description: Line login, get an access token for future requests
      operationId: login_line_user
      parameters:
      - in: query
        name: id_token
        required: true
        schema:
          title: Id Token
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Login Line User
      tags:
      - users
  /api/v1/users/{user_id}:
    put:
      description: Update a user.
      operationId: update_citizen_user
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          format: uuid
          title: User Id
          type: string
      - in: query
        name: is_active
        required: true
        schema:
          title: Is Active
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CitizenUser'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Update Citizen User
      tags:
      - users
  /api/v1/utils/health-check/:
    get:
      operationId: health_check
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Health Check
                type: boolean
          description: Successful Response
      summary: Health Check
      tags:
      - utils
  /api/v1/utils/ping:
    get:
      operationId: ping
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                title: Response Ping
                type: object
          description: Successful Response
      summary: Ping
      tags:
      - utils
